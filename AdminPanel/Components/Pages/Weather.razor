@page "/weather"
@attribute [StreamRendering]
@using System.Net.Http.Json
@using AdminPanel.Models.WeatherForecast

@inject HttpClient http

<MudDataGrid T="WeatherForecast" MultiSelection="true" Items="@Forecasts" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true" RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Weather Forecasts</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="WeatherForecast" />
        <PropertyColumn Property="x => x.Date" Title="Date" Sortable="true" />
        <PropertyColumn Property="x => x.TemperatureC" Title="Temperature (C)" Sortable="true" />
        <PropertyColumn Property="x => x.TemperatureF" Title="Temperature (F)" Sortable="true" />
        <PropertyColumn Property="x => x.Summary" Title="Summary" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="WeatherForecast" />
    </PagerContent>
</MudDataGrid>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Value="@_sortByTemp" Color="Color.Primary">Sort by Temperature (C)</MudSwitch>
</div>

<MudExpansionPanels Style="flex:1">
    <MudExpansionPanel Text="Show Events">
        @foreach (var message in _events)
        {
            <MudText Typo="@Typo.body2">@message</MudText>
        }
        @if (_events.Count > 0)
        {
            <div class="d-flex">
                <MudSpacer />
                <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
            </div>
        }
    </MudExpansionPanel>
</MudExpansionPanels>

@code {
    private IEnumerable<WeatherForecast> Forecasts = new List<WeatherForecast>();
    private string _searchString;
    private bool _sortByTemp;
    private List<string> _events = new();

    // custom sort by temperature in Celsius or Fahrenheit
    private Func<WeatherForecast, object> _sortBy => x =>
    {
        if (_sortByTemp)
            return x.TemperatureC;
        else
            return x.TemperatureF;
    };

    // quick filter - filter globally across multiple columns with the same input
    private Func<WeatherForecast, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Summary.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Date} {x.TemperatureC} {x.Summary}".Contains(_searchString))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        Forecasts = await http.GetFromJsonAsync<List<WeatherForecast>>("https://localhost:7161/api/weather");
        
    }


    // events
    void RowClicked(DataGridRowClickEventArgs<WeatherForecast> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<WeatherForecast> args)
    {
        _events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<WeatherForecast> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }
}


